---
name: test

on:
  workflow_call: {}
  workflow_dispatch:
    inputs:
      debug_unit:
        description: "start tmate before unit tests"
        type: boolean
        required: false
        default: false
      debug_functional:
        description: "start tmate before functional tests"
        type: boolean
        required: false
        default: false

jobs:
  unit:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.version }}

      # genie has ridiculous pins, pip (and maybe you?) will die if you try to install it
      # with basically anything else... so just install separately
      - name: install python dev tools
        run: |
          python -m pip install -r requirements-dev.txt
          python -m pip install -r requirements-genie.txt
          python -m pip install -r requirements-textfsm.txt

      # load from the cached built .so/.dylib objects -- pip install skips the whole zig build part
      # if scrapil/lib already contains the expected/target shared object
      - name: set target libscrapli version
        run: |
          echo "LIBSCRAPLI_VERSION=$(grep -Eo 'LIBSCRAPLI_VERSION\s*=\s*\"[^\"]+\"' setup.py | cut -d '"' -f2)" >> "$GITHUB_ENV"

      - name: restore libscrapli from build cache
        uses: actions/cache@v3
        with:
          path: ./scrapli/lib
          key: x86_64-linux-gnu-libscrapli.${{ env.LIBSCRAPLI_VERSION }}.so

      - name: rename restored libscracpli
        run: |
          mv ./scrapli/lib/libscrapli.* ./scrapli/lib/libscrapli.${{ env.LIBSCRAPLI_VERSION }}.so

      - name: install scrapli+libscrapli
        run: |
          python -m pip install .

      - name: setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_unit }}

      - name: unit tests
        run: |
          make test

  functional:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        # we want to ensure we are doing the functional tests on all our main targets
        # this ensures all the ctypes magic works on all the platforms we can run in ci at least
        # if unit tests etc work then this *should* work but... ya know... trust but verify i guess
        os: ["ubuntu-latest", "macos-latest", "ubuntu-24.04-arm", "macos-13"]

    # run functional on main or prs pointing to main
    if: >
      (
        github.ref_name == 'main' ||
        github.base_ref == 'main'
      ) || (
        github.event_name == 'workflow_dispatch' &&
        inputs.debug_e2e
      )

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: load env vars for workflow run
        run: |
          source .github/vars.env
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> "$GITHUB_ENV"
          echo "CONTAINERLAB_VERSION=$CONTAINERLAB_VERSION" >> "$GITHUB_ENV"

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install containerlab
        run: |
          bash -c "$(curl -sL https://get.containerlab.dev)" -- -v ${{ env.CONTAINERLAB_VERSION }}

      - name: build netopeer server image
        run: |
          make build-netopeer-server

      - name: run containerlab topology
        run: |
          sudo clab deploy -t topo.ci.amd64.yaml
        working-directory: tests/functional/clab

      - name: install python dev tools
        run: |
          python -m pip install -r requirements-dev.txt

      # load from the cached built .so/.dylib objects -- pip install skips the whole zig build part
      # if scrapil/lib already contains the expected/target shared object; this one is worse than
      # for unit tests as we deal w/ multiple different targets
      - name: set target libscrapli version
        run: |
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              ZIG_TRIPLE="x86_64-linux-gnu"
              EXT="so"
              ;;
            "ubuntu-24.04-arm")
              ZIG_TRIPLE="aarch64-linux-gnu"
              EXT="so"
              ;;
            "macos-latest")
              ZIG_TRIPLE="x86_64-macos"
              EXT="dylib"
              ;;
            "macos-13")
              ZIG_TRIPLE="aarch64-macos"
              EXT="dylib"
              ;;
            *)
              echo "Unknown OS: ${{ matrix.os }}"
              exit 1
              ;;
          esac
          LIBSCRAPLI_VERSION="$(grep -Eo 'LIBSCRAPLI_VERSION\s*=\s*\"[^\"]+\"' setup.py | cut -d '"' -f2)"
          LIBSCRAPLI_OUT_NAME="libscrapli.${LIBSCRAPLI_VERSION}.${EXT}"
          echo "LIBSCRAPLI_CACHED_NAME=${ZIG_TRIPLE}-${LIBSCRAPLI_OUT_NAME}" >> "$GITHUB_ENV"
          echo "LIBSCRAPLI_NAME=${LIBSCRAPLI_OUT_NAME}" >> "$GITHUB_ENV"

      - name: restore libscrapli from build cache
        uses: actions/cache@v3
        with:
          path: ./scrapli/lib
          key: x86_64-linux-gnu-libscrapli.${{ env.LIBSCRAPLI_VERSION }}.so

      - name: rename restored libscracpli
        run: |
          mv ./scrapli/lib/libscrapli.* ./scrapli/lib/${{ env.LIBSCRAPLI_NAME }}

      - name: install scrapli+libscrapli
        run: |
          python -m pip install .

      - name: setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_e2e }}

      - name: wait for srl node to be available
        run: |
          ./wait.sh
        working-directory: tests/functional/clab

      - name: functional tests
        # skip the "enormous" output test as its super slow in gh runners
        run: |
          make test-functional-ci ARGS="--skip-slow"
