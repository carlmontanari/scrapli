name: Commit

on: [push, pull_request, workflow_dispatch]

jobs:
  darglint:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        version: ["3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.version }}
      - name: setup test env
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools
          python -m pip install nox
      - name: run nox darglint
        run: python -m nox -s darglint

  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        version: ["3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.version }}
      - name: setup test env
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools
          python -m pip install nox
      - name: run nox
        env:
          TERM: xterm
        run: python -m nox -s unit_tests
      - name: Upload coverage
        uses: codecov/codecov-action@v2.1.0

  build_posix:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 8
      matrix:
        os: [ubuntu-latest, macos-latest]
        version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.version }}
      - name: get friendly (for nox) python version
        # not super friendly looking, but easy way to get major.minor version so we can easily exec only the specific
        # version we are targeting with nox, while still having versions like 3.9.0a4
        run: |
          echo "FRIENDLY_PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")" >> $GITHUB_ENV
      - name: ensure openssl installed for macos
        # openssl missing/being linked incorrectly causes ssh2-python install failures
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl
      - name: setup test env
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools
          python -m pip install nox
      - name: run nox
        env:
          # needed to make the terminal a tty (i think? without this system ssh is super broken)
          TERM: xterm
        run: python -m nox -p $FRIENDLY_PYTHON_VERSION -k "not darglint"

  docs-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: docker run -v $(pwd):/docs --entrypoint "" squidfunk/mkdocs-material:latest ash -c 'pip install mdx_gh_links && mkdocs build --clean --strict'
      - name: Cache htmltest external links
        uses: actions/cache@v2
        with:
          path: tmp/.htmltest
          # key will contain hash of all md files to check if files have changed
          # when files are changed, a new key name is formed, and thus a new cache will be saved
          key: htmltest-${{ hashFiles('docs/**/*.md') }}
          # the restore key will fetch any previously saved cache even if there is no match on key
          # this allows to use cache from prev runs and update it
          restore-keys: |
            htmltest-
      - name: htmltest
        uses: wjdp/htmltest-action@v0.13.0-rc1
        with:
          config: docs/htmltest.yml
